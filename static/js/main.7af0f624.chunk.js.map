{"version":3,"sources":["Desktop.png","About.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","About","theme","className","src","desktop","alt","Themes","setTheme","themeList","Object","keys","map","t","onClick","Main","type","defaults","useState","value","setValue","onChange","e","document","title","target","autoFocus","useInput","cverTextInput","to","href","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,qC,mLCiB5BC,MAdf,YAAyB,IAATC,EAAQ,EAARA,MAEd,OACI,yBAAKC,UAAWD,GACd,oCAEA,wEACA,wFAEA,yBAAKE,IAAKC,IAASC,IAAI,WCO/B,IAAMC,EAAS,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACTC,EAAY,CAChB,aAAc,YACd,MAAS,QACT,MAAS,SAIX,OAAO,gCAAMC,OAAOC,KAAKF,GAAWG,KAAI,SAAAC,GAEtC,OAAO,wBAAIC,QADO,kBAAMN,EAASC,EAAUI,MACXA,MAF3B,MAOT,SAASE,EAAT,GAAkC,IAAnBb,EAAkB,EAAlBA,MAAOM,EAAW,EAAXA,SAAW,EAxBjC,YAAuC,IAAnBQ,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,SAAY,EACVC,mBAASD,GADC,mBAC7BE,EAD6B,KACtBC,EADsB,KAMpC,MAAO,CAACD,EAJM,2BAAOA,MAAOA,EAAOE,SAAU,SAAAC,GAC3CC,SAASC,MAAT,iBAA2BF,EAAEG,OAAON,OACpCC,EAASE,EAAEG,OAAON,QACjBH,KAAMA,EAAMU,WAAS,KAoBWC,CAAS,CAAEX,KAAM,OAAQC,SAAU,oBADvC,mBACbW,GADa,WAK/B,OACE,yBAAKzB,UAAWD,GACd,yBAAKC,UAAU,SACZyB,GAEH,yBAAKzB,UAAU,UAAf,gBAEE,kBAAC,EAAD,CAAQK,SAAUA,KAEpB,yBAAKL,UAAU,UACb,2BAAG,kBAAC,IAAD,CAAM0B,GAAG,UAAT,UACH,wDAAmB,uBAAGC,KAAK,6BAAR,WAuBZC,MAjBf,WAAgB,IAAD,EACeb,mBAAS,aADxB,mBACLhB,EADK,KACEM,EADF,KAGb,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOwB,OAAK,EAACC,KAAK,KAChB,kBAAClB,EAAD,CAAMb,MAAOA,EAAOM,SAAUA,KAEhC,kBAAC,IAAD,CAAOyB,KAAK,UACV,kBAAC,EAAD,CAAO/B,MAAOA,QCtDJgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlB,SAASmB,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7af0f624.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Desktop.b98cb24f.png\";","import React from 'react';\nimport desktop from './Desktop.png'; \n\nfunction About({theme}) {\n  \n  return (\n      <div className={theme}>\n        <h1>Cver</h1>\n\n        <h2>A tool to setup cover for groups of tabs</h2>\n        <h3>Just write the title, choose a theme, and reduce as icon</h3>\n\n        <img src={desktop} alt=\"Logo\" />\n      </div>\n  );\n}\n\nexport default About;\n","import React, { useState } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport About from './About';\n\nfunction useInput({ type, defaults }) {\n  const [value, setValue] = useState(defaults);\n  const input = <input value={value} onChange={e => {\n    document.title = `Cver - ${e.target.value}`\n    setValue(e.target.value)\n  }} type={type} autoFocus />;\n  return [value, input];\n}\n\nconst Themes = ({setTheme}) => {\n  const themeList = {\n    'Space Grey': 'spaceGrey',\n    'Shiny': 'shiny',\n    'Coral': 'coral'\n  }\n\n\n  return <ul> {Object.keys(themeList).map(t => {\n    const _setTheme = () => setTheme(themeList[t])\n    return <li onClick={_setTheme}>{t}</li>\n  }\n  )} </ul>\n}\n\nfunction Main({theme, setTheme}) {\n  const [ cverText, cverTextInput] = useInput({ type: \"text\", defaults: \"Your cover here\" });\n\n\n  \n  return (\n    <div className={theme} >\n      <div className='input'>\n        {cverTextInput}\n      </div>\n      <div className='themes'>\n        Select theme:\n        <Themes setTheme={setTheme}/>\n      </div>\n      <div className='footer'>\n        <p><Link to=\"/about\">About</Link></p>\n        <p>Made with ❤️ by <a href='https://www.vernizzis.it/'>Dave</a></p>\n      </div>\n    </div>\n  );\n}\n\nfunction App() {\n  const [ theme, setTheme ] = useState('spaceGrey');\n\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <Main theme={theme} setTheme={setTheme}/>\n        </Route>\n        <Route path=\"/about\">\n          <About theme={theme} />\n        </Route>\n      </Switch>\n    </Router>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport './custom.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}